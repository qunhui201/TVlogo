name: Build M3U Playlist
on:
  workflow_dispatch:
  schedule:
    - cron: "30 */4 * * *" # 每4小时30分运行
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1. 检出仓库
      - name: Checkout repository
        uses: actions/checkout@v4
      # 2. 设置 Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      # 3. 安装依赖
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r md/requirements.txt
      # 4. 运行 Python 脚本生成文件
      - name: Run build scripts
        run: |
          python3 md/build_m3u.py # 生成 output.m3u + tvbox_output.txt (根目录)
          python3 md/build_m3u_add_logo.py # 生成 output_with_logo.m3u
      # 4.1 调试：列出文件确认生成
      - name: List files for debug
        run: |
          ls -la  # 列出根目录文件
          if [ -f output_with_logo.m3u ]; then
            cat output_with_logo.m3u | head -n 5  # 打印前5行验证内容
          else
            echo "⚠️ output_with_logo.m3u 不存在！"
          fi
      # 5. 检查 output_with_logo.m3u 是否更新
      - name: Check for updates
        id: check_update
        run: |
          # 如果脚本生成在 md/ 下，复制到根目录
          if [ -f md/output_with_logo.m3u ]; then
            cp md/output_with_logo.m3u .
            echo "✅ 已从 md/ 复制 output_with_logo.m3u 到根目录。"
          fi
          if [ ! -f output_with_logo.m3u ]; then
            echo "no_change=false" >> $GITHUB_ENV
            echo "⚠️ 文件不存在，视为新生成。"
          else
            git add output_with_logo.m3u  # 先 add 到暂存区以检测新文件
            if git diff --quiet --exit-code --cached -- output_with_logo.m3u; then
              echo "no_change=true" >> $GITHUB_ENV
              echo "✅ 文件内容未变化，本次运行跳过保存。"
            else
              echo "no_change=false" >> $GITHUB_ENV
              echo "🆕 检测到文件内容更新，将保存新版本。"
            fi
          fi
      # 6. 若有更新则保存历史文件
      - name: Save updated M3U and TVBox files
        if: env.no_change == 'false'
        run: |
          TIMESTAMP=$(date +"%m%d%H%M")
          mkdir -p history
          cp output.m3u history/${TIMESTAMP}.m3u
          cp output_with_logo.m3u history/logo${TIMESTAMP}.m3u
          cp tvbox_output.txt history/tvbox_${TIMESTAMP}.txt
          echo "✅ 已保存到 history/ 目录："
          echo " - ${TIMESTAMP}.m3u"
          echo " - logo${TIMESTAMP}.m3u"
          echo " - tvbox_${TIMESTAMP}.txt"
      # 7. 提交更新到仓库（仅主分支）
      - name: Commit updated files to repo
        if: env.no_change == 'false' && github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add output.m3u output_with_logo.m3u tvbox_output.txt
          git commit -m "Add updated M3U and TVBox build $(date +"%m%d%H%M") [skip ci]" || true
          git push
      # 8. 上传 artifact（仅当有更新）
      - name: Upload M3U and TVBox files as artifact
        if: always()  # 改为 always() 以便调试，即使 no_change 也上传
        uses: actions/upload-artifact@v4
        with:
          name: m3u-playlist-${{ github.run_id }}
          path: |
            output.m3u
            output_with_logo.m3u
            tvbox_output.txt
            missing_logos.txt
