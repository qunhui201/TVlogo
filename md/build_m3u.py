#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import time
from pathlib import Path
from collections import defaultdict
import requests

# ---------- ÈÖçÁΩÆ ----------
INPUT_URLS = [
    "http://httop.top/iptvs.m3u",
    "http://httop.top/iptvx.m3u"
]

LOGO_DIR = Path("TVlogo_Images")
OUTPUT_FILE = Path("output.m3u")
ALIAS_FILE = Path("md/mohupidao.txt")

FIXED_HEADER = '#EXTM3U x-tvg-url="https://raw.githubusercontent.com/Guovin/iptv-api/refs/heads/master/output/epg/epg.gz"'

SERIES_CATEGORIES = ["CIBN", "DOX", "NewTV", "iHOT"]

# ---------- ËØªÂèñÂà´ÂêçË°® ----------
def load_aliases(alias_file):
    alias_map = {}
    with open(alias_file, encoding="utf-8") as f:
        for line in f:
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            parts = [p.strip() for p in line.split(",") if p.strip()]
            main_name = parts[0]
            for alias in parts[1:]:
                if alias.startswith("re:"):
                    pattern = alias[3:]
                    alias_map[pattern] = main_name
                else:
                    alias_map[alias] = main_name
    return alias_map

# ---------- M3U ‰∏ãËΩΩ ----------
def download_m3u(url):
    try:
        resp = requests.get(url, timeout=15)
        resp.raise_for_status()
        return resp.text.splitlines()
    except Exception as e:
        print(f"‚ö†Ô∏è ‰∏ãËΩΩÂ§±Ë¥• {url}: {e}")
        return []

# ---------- Ëß£Êûê M3U ----------
def parse_m3u(lines):
    channels = []
    current_group = None
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        if line.startswith("#EXTINF"):
            # Â∞ùËØïËé∑Âèñ group-title ÂàÜÁ±ª
            m = re.search(r'group-title="([^"]*)"', line)
            group = m.group(1) if m else None
            name = line.split(",")[-1].strip()
            i += 1
            if i < len(lines):
                url = lines[i].strip()
                channels.append((name, url, group))
        i += 1
    return channels

# ---------- Â∫îÁî®Âà´Âêç ----------
def apply_alias(name, alias_map):
    # ÂÖàÁõ¥Êé•ÂåπÈÖç
    if name in alias_map:
        return alias_map[name]
    # ÂÜçÂåπÈÖçÊ≠£Âàô
    for pattern, main_name in alias_map.items():
        if re.match(pattern, name):
            return main_name
    return name

# ---------- ÊûÑÂª∫ logo_map ----------
def build_logo_map():
    logo_map = {}
    for folder in LOGO_DIR.iterdir():
        if not folder.is_dir():
            continue
        for file in folder.iterdir():
            if file.suffix.lower() == ".png":
                logo_map[file.stem] = file
    return logo_map

# ---------- Ëé∑ÂèñÂú∞ÊñπÂú∞Âêç ----------
def get_regions():
    regions = []
    for folder in LOGO_DIR.iterdir():
        if folder.is_dir() and folder.name not in ["‰∏≠Â§ÆÁîµËßÜÂè∞", "ÂÖ®ÂõΩÂç´ËßÜ"] + SERIES_CATEGORIES:
            regions.append(folder.name)
    return regions

# ---------- Âà§Êñ≠ÂàÜÁ±ª ----------
def classify_channel(name, original_group, regions):
    # Â¶ÇÊûúÂéü M3U ÈáåÊúâÂàÜÁªÑ‰∏îÊòØÂ§ÆËßÜ/Âç´ËßÜÔºåÁõ¥Êé•Áî®
    if original_group and ("CCTV" in original_group or "Âç´ËßÜ" in original_group):
        return original_group
    # Âú∞ÊñπÈ¢ëÈÅì
    for region in regions:
        if region in name and "Âç´ËßÜ" not in name:
            return "Âú∞ÊñπÈ¢ëÈÅì"
    # Á≥ªÂàóÈ¢ëÈÅì
    for s in SERIES_CATEGORIES:
        if s in name:
            return f"{s}Á≥ªÂàó"
    # ÂÖ∂‰ªñÈ¢ëÈÅì
    return "ÂÖ∂‰ªñÈ¢ëÈÅì"

# ---------- ÁîüÊàê EXTINF Êù°ÁõÆ ----------
def build_entry(name, url, category, logo_map, regions):
    logo_file = logo_map.get(name)
    if not logo_file:
        for region in regions:
            candidate = LOGO_DIR / region / f"{name}.png"
            if candidate.exists():
                logo_file = candidate
                break
    if logo_file:
        logo_url = f"https://cdn.jsdelivr.net/gh/qunhui201/TVlogo/img/{logo_file.relative_to(LOGO_DIR)}".replace("\\", "/")
    else:
        logo_url = f"https://cdn.jsdelivr.net/gh/qunhui201/TVlogo/img/ÂÖ∂‰ªñ/{name}.png"
    return f'#EXTINF:-1 tvg-name="{name}" tvg-logo="{logo_url}" group-title="{category}",{name}\n{url}'

# ---------- ‰∏ªÁ®ãÂ∫è ----------
def main():
    alias_map = load_aliases(ALIAS_FILE)
    logo_map = build_logo_map()
    regions = get_regions()

    all_channels = []
    for url in INPUT_URLS:
        lines = download_m3u(url)
        all_channels.extend(parse_m3u(lines))

    # Â∫îÁî®Âà´Âêç
    all_channels = [(apply_alias(name, alias_map), url, grp) for name, url, grp in all_channels]

    # ÂàÜÁ±ª
    channel_dict = defaultdict(list)
    for name, url, grp in all_channels:
        category = classify_channel(name, grp, regions)
        channel_dict[category].append((name, url))

    # ÊåâÈ°∫Â∫èËæìÂá∫
    output_entries = []
    CATEGORY_ORDER = ["Â§ÆËßÜÈ¢ëÈÅì", "Âç´ËßÜÈ¢ëÈÅì", "Âú∞ÊñπÈ¢ëÈÅì"] + [f"{s}Á≥ªÂàó" for s in SERIES_CATEGORIES] + ["ÂÖ∂‰ªñÈ¢ëÈÅì"]
    for cat in CATEGORY_ORDER:
        for name, url in channel_dict.get(cat, []):
            output_entries.append(build_entry(name, url, cat, logo_map, regions))

    # ÂÜôÂÖ•Êñá‰ª∂
    with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
        f.write(FIXED_HEADER + "\n")
        f.write(f'#EXTINF:-1,üïò Êõ¥Êñ∞Êó∂Èó¥ {time.strftime("%Y-%m-%d %H:%M:%S")}\n')
        for line in output_entries:
            f.write(line + "\n")

    print(f"‚úÖ Â∑≤ÁîüÊàê {OUTPUT_FILE}")

if __name__ == "__main__":
    main()
